> webpack.congif.js

    * CSS
        css-loader : js 파일에서 css 파일을 불러오기 위해 사용하는 로더
        mini-css-extract-plugin : css를 별도의 파일로 추출. css를 포함하는 js파일마다 css 파일을 생성 (sass)
        style-loder : css-loader를 이용해 웹팩 의존성 트리에 추가된 string 값들을 돔에 스타일 태그(<style></style>)로 넣어준다. (styled-components)
        css-loader를 뒤로 배치하기
        참고: https://www.zerocho.com/category/Webpack/post/58ac2d6f2e437800181c1657

!! eslint-config-react-app ts세팅에 필요한지 확인하기

> Non-null assertion operator

    피연산자가 null, undefined가 아니라고 단언해 준다.
    해당 피연산자가 null, undefined가 아닌 타입의 value를 갖는다고 프로그래머가 단언할 때 에러를 방지하기 위해 사용
    권장되는 내용은 아님

> React.FC

    - 지양하는 추세
    이유 - 타입 체크에 대한 이슈와 정확한 타입 추론을 위해

    1. React.FC를 사용하면 자동으로 children prop이 포함되기 때문에 컴포넌트에서 props가 필요하지 않더라도 항상 유형 검사에 포함된다. -> 코드를 더 복잡하게 만들 수 있고 불필요한 prop를 받을 수 있기 때문

    2. 컴포넌트의 props 타입을 사용할 때 children을 고려해야 한다. 이로 인해 Props의 타입 추론이 어려워질 수 있고,
    컴포넌트의 인터페이스를 정확하게 정의하는 데 어려움을 겪을 수 있다.

    - 기존에 사용한 이유
    이전에는 타입스크립트와 리액트를 함께 사용할 때 컴포넌트의 props타입을 명시하기 어렵고 복잡했기 때문.
    리액트 초기 버전에서는 함수형 컴포넌트의 props 타입을 제대로 추론하지 못하는 경우가 종종 있어
    React.FC 타입을 사용해 컴포넌트의 props 타입을 더 쉽게 정의하고 추론할 수 있도록 했다.

> 타입 확장

    extends
